/* Colors */

.set-rep-color() when (saturation(@base-color) < 5%) {
    @rep-color: .set-lumafix(tan, @strength: 50%)[];
}

.set-rep-color() when (saturation(@base-color) >= 5%) {
    @rep-color: @base-color;
}

.set-color(@color-name, @base, @luma-modifier: .5, @ambient-modifier: 1, @outputs: false) {
	// @color-name: the name of the color, which will be the class name
	// @base: the base representative color
	// @luma-modifier: [0 - 1] how much the color is luma-matched to @base-color
	// @ambient-modifier: [.9 - 1.1 works best] how much the ambient light affects the color

	// generate the color base
	@color-base: .set-lumafix(@base; @strength: @luma-modifier;)[];

	// output the class and rules if outputs are enabled
	.@{color-name} when (@outputs = true) {
		.color-helpers(@color);
  }

  @ambient-adjusted: (100% * @ambient-modifier);

	// apply ambient lighting
	@color: mix(@color-base, overlay(@ambient, @color-base), @ambient-adjusted);
}

.color-helpers(@color, @multiplier: 1) {

    // create the color and its twelve basic variants
    
    @brightened: saturate(lighten(@color, (@multiplier*@lighten-by*.5)), 10%);
    @very-brightened-guess: saturate(lighten(@brightened, 3%), 15%);
    @hella-brightened-guess: saturate(lighten(@brightened, 6%), 25%);
    
    @dimmed: desaturate(darken(@color, (@multiplier*@lighten-by*.1)), 12%);
    @very-dimmed-guess: desaturate(darken(@dimmed, 8%), 10%);
    @hella-dimmed-guess: desaturate(darken(@dimmed, 16%), 20%);
    
    @lightened: lighten(@color, @multiplier*@lighten-by);
    @very-lightened-guess: lighten(@lightened, 33%);
    @hella-lightened-guess: lighten(@lightened, 66%);

    @darkened: darken(@color, @multiplier*@lighten-by);
    @very-darkened-guess: darken(@darkened, 15%);
    @hella-darkened-guess: darken(@darkened, 25%);
    
    @base-contrast-ceiling: .set-contrast-ratio(@color, @white)[];
    @border-color: .set-lumafix(@color, @black, 75%)[];

    .text-color(@ceiling) when (@ceiling >= 3) {
        &:extend(.tint);
    }

    .text-color(@ceiling) when (@ceiling < 3) {
        &:extend(.shade);
    }

    .text-color(@ceiling, @local-ceiling) when (@ceiling < 3) and (@local-ceiling >= 3) {
        &:extend(.tint);
    }

    .text-color(@ceiling, @local-ceiling) when (@ceiling >= 3) and (@local-ceiling < 3) {
        &:extend(.shade);
    }

    .text-color(@base-contrast-ceiling);

    --h: round(hue(@color), 0);
    --s: round(saturation(@color), 0);
    --l: round(lightness(@color), 0);

    .light& { 
        --b: round(lightness(@lightened), 0);
        
        @light-ceiling: .set-contrast-ratio(@lightened, @white)[];
        .text-color(@base-contrast-ceiling, @light-ceiling);
    } 

    .very.light& {
        @light-ceiling: .set-contrast-ratio(@very-lightened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @light-ceiling);
    }

    .hella.light& {
        @light-ceiling: .set-contrast-ratio(@hella-lightened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @light-ceiling);
    }

    .dark& { 
        --b: round(lightness(@darkened), 0);

        @dark-ceiling: .set-contrast-ratio(@darkened, @white)[];
        .text-color(@base-contrast-ceiling, @dark-ceiling);
    }

    .very.dark& {
        @dark-ceiling: .set-contrast-ratio(@very-darkened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @dark-ceiling);
    }

    .hella.dark& {
        @dark-ceiling: .set-contrast-ratio(@hella-darkened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @dark-ceiling);
    }

    .bright& { 
        --b-s: round(saturation(@brightened), 0);
        --b-l: round(lightness(@brightened), 0);

        @bright-ceiling: .set-contrast-ratio(@brightened, @white)[];
        .text-color(@base-contrast-ceiling, @bright-ceiling);
    }

    .very.bright& {
        @bright-ceiling: .set-contrast-ratio(@very-brightened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @bright-ceiling);
    }

    .hella.bright& {
        @bright-ceiling: .set-contrast-ratio(@hella-brightened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @bright-ceiling);
    }

    .dim& { 
        --b-s: round(saturation(@dimmed), 0);
        --b-l: round(lightness(@dimmed), 0);

        @dim-ceiling: .set-contrast-ratio(@dimmed, @white)[];
        .text-color(@base-contrast-ceiling, @dim-ceiling);
    }

    .very.dim& {
        @dim-ceiling: .set-contrast-ratio(@very-dimmed-guess, @white)[];
        .text-color(@base-contrast-ceiling, @dim-ceiling);
    }

    .hella.dim& {
        @dim-ceiling: .set-contrast-ratio(@hella-dimmed-guess, @white)[];
        .text-color(@base-contrast-ceiling, @dim-ceiling);
    }
}

@rep-color: .set-rep-color()[];
@ambient: softlight(screen(@base-color, @base-color), @base-color);

@white: mix(white, @ambient, 98%);
@black: desaturate(mix(black, @ambient, 85%), 0%);
@gray: .set-color(~"gray", mix(rgb(204, 204, 204), @base-color, 90%), (2/3))[];

@red-base: rgb(218, 39, 39); 
@orange-base: rgb(246, 164, 10); 
@yellow-base: rgb(251, 251, 5); 
@green-base: rgb(45, 165, 45); 
@teal-base: rgb(49, 170, 170); 
@cyan-base: rgb(14, 241, 241); 
@blue-base: rgb(23, 68, 218); 
@purple-base: rgb(160, 36, 160); 
@magenta-base: rgb(231, 17, 231); 

@red:                                   .set-color(~"red", @red-base, (1/2), .9)[];
@red-orange: .set-color(~"orangered", average(@red-base, @orange-base), (1/6), .95)[];
@orange:                                .set-color(~"orange", @orange-base, (1/24), .95)[];
@orange-yellow: .set-color(~"gold", average(@orange-base, @yellow-base), (1/18), .925)[];
@yellow:                                .set-color(~"yellow", @yellow-base, (1/12), .925)[];
@yellow-green: .set-color(~"lime", average(@yellow-base, @green-base), (1/5), .85)[];
@green:                                 .set-color(~"green", @green-base, (1/2), .7)[];
@green-teal: .set-color(~"jade", average(@green-base, @teal-base), (5/8), .8)[];
@teal:                                  .set-color(~"teal", @teal-base, (5/8), .8)[];
@teal-cyan: .set-color(~"aqua", average(@teal-base, @cyan-base), (7/8), .75)[];
@cyan:                                  .set-color(~"cyan", @cyan-base, (3/8), .9)[];
@cyan-blue: .set-color(~"skyblue", average(@cyan-base, @blue-base), (3/8), .85)[];
@blue:                                  .set-color(~"blue", @blue-base, (1/2), .8)[];
@blue-purple: .set-color(~"indigo", average(@blue-base, @purple-base), (7/8), .9)[];
@purple:                                .set-color(~"purple", @purple-base, (2/5), .8)[];
@purple-magenta: .set-color(~"fuchsia", average(@purple-base, @magenta-base), (2/5), .85)[];
@magenta:                               .set-color(~"magenta", @magenta-base, (1/3), .9)[];
@magenta-red: .set-color(~"pink", average(@magenta-base, @red-base), (1/5), .9)[];

@white-gray: mix(@white, @gray, 75%);
@gray-black: average(@gray, @black);

@accent-base: .set-lumafix(spin(@rep-color, 30), @yellow)[];
@accent: .set-color(accent, @accent-base, 1, 1)[];

@complement-base: .set-lumafix(spin(@rep-color, 180), @base-color, 50%)[];
@complement: .set-color(complement, @complement-base, 1, 1)[];

@accent-complement-base: .set-lumafix(spin(@rep-color, 210), @yellow)[];
@accent-complement: .set-color(complaccent, @accent-complement-base, 1, 1)[];

.default {
    --v: 0;
}

.default > *, .sorta > *, .very > *, .hella > *, .super > * {
    --v: 0;
}

.sorta {
    --v: .6;
}

.very {
    --v: 1.2;
}

.hella, .super {
    --v: 1.8;
}

.light {
    --l: ~"calc(var(--b) + ((100% - var(--b)) * var(--jump) * var(--v, 0)))" !important;
    --jump: .35;
}

.dark {
    --l: ~"calc(var(--b) - ((var(--b) - 20%) * var(--jump) * 2 * var(--v, 0)))" !important;
    --jump: .15;
}

.bright {
    --s: ~"calc(var(--b-s) + ((100% - var(--b-s)) * var(--jump) * 1 * var(--v, 0)))" !important;
    --l: ~"calc(var(--b-l) + ((100% - var(--b-l)) * var(--jump) * 1 * var(--v, 0)))" !important;
    --jump: .2;
}

.dim {
    --s: ~"calc(var(--b-s) - ((var(--b-s)) * var(--jump) * 4 * var(--v, 0)))" !important;
    --l: ~"calc(var(--b-l) - ((var(--b-l)) * var(--jump) * .5 * var(--v, 0)))" !important;
    --jump: .1;
}

.white { .color-helpers(@white, .01); --jump: .01;}
.white.gray { .color-helpers(@white-gray, .2); --jump: .1;}
.gray { .color-helpers(@gray, .3); --jump: .08;}
.gray.black { .color-helpers(@gray-black, .5); --jump: .1;}
.black { .color-helpers(@black, .75); --jump: .15;}

.brand-color, .base-color, .base { .color-helpers(@base-color, .5);}
.complement { .color-helpers(@complement, .5);}
.accent { .color-helpers(@accent, .5);}
.complement.accent { .color-helpers(@accent-complement, .5);}

.red { .color-helpers(@red, .6);}
.red.orange, .orangered { .color-helpers(@red-orange, .25);}
.orange { .color-helpers(@orange, .05);}
.orange.yellow, .gold { .color-helpers(@orange-yellow, .05);}
.yellow { .color-helpers(@yellow, .05);}
.yellow.green, .lime { .color-helpers(@yellow-green, .15);}
.green { .color-helpers(@green, .6);}
.green.teal, .jade { .color-helpers(@green-teal, .5);}
.teal { .color-helpers(@teal, .2);}
.teal.cyan, .aqua { .color-helpers(@teal-cyan, .5);}
.cyan { .color-helpers(@cyan, .85);}
.cyan.blue, .skyblue, .sky { .color-helpers(@cyan-blue);}
.blue { .color-helpers(@blue, .85);}
.blue.purple, .indigo { .color-helpers(@blue-purple);}
.purple { .color-helpers(@purple, .75);}
.purple.magenta, .fuchsia { .color-helpers(@purple-magenta);}
.magenta { .color-helpers(@magenta, .75);}
.magenta.red, .pink { .color-helpers(@magenta-red, .9);}

.desaturated, .desaturated * {
    --s: 0% !important;
}

.desaturated img, .desaturated svg {
    filter: grayscale(100%);
}

.matched {
    --l: lightness(@base-color) !important;
}

.bright.gray, .bright.black, .light.black {
    --s: 10% !important;
}

.white {
    color: var(--black) !important;
}

.black {
    color: var(--white) !important;
}

.text-color.white {
    color: var(--white) !important;
}

.text-color.black {
    color: var(--black) !important;
}