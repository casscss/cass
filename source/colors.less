/* Colors */

.set-rep-color() when (saturation(@base-color) < 5%) {
    @rep-color: .set-lumafix(tan, @strength: 50%)[];
}

.set-rep-color() when (saturation(@base-color) >= 5%) {
    @rep-color: @base-color;
}

@rep-color: .set-rep-color()[];
@ambient: softlight(screen(@base-color, @base-color), @base-color);

@white: mix(white, @ambient, 98%);
@black: desaturate(mix(black, @ambient, 85%), 0%);
@gray: .set-color(~"gray", rgb(204, 204, 204), (5/6))[];

@red: .set-color(~"red", rgb(218, 39, 39), (1/3), .95)[];
@orange: .set-color(~"orange", orange, (1/12), .99)[];
@yellow: .set-color(~"yellow", yellow, (1/12), .95)[];
@green: .set-color(~"green", rgb(45, 165, 45), (1/2), .8)[];
@teal: .set-color(~"teal", rgb(49, 170, 170), (1/2), .8)[];
@cyan: .set-color(~"cyan", rgb(14, 241, 241), (1/3), .85)[];
@blue: .set-color(~"blue", rgb(23, 68, 218), (2/3), .85)[];
@purple: .set-color(~"purple", rgb(160, 36, 160), (2/3), .85)[];
@magenta: .set-color(~"magenta", rgb(231, 17, 231), (7/8), .9)[];

@white-gray: mix(@white, @gray, 75%);
@gray-black: average(@gray, @black);

@red-orange: average(@red, @orange);
@orange-yellow: average(@orange, @yellow);
@yellow-green: average(@yellow, @green);
@green-teal: average(@green, @teal);
@teal-cyan: average(@teal, @cyan);
@cyan-blue: average(@cyan, @blue);
@blue-purple: average(@blue, @purple);
@purple-magenta: average(@purple, @magenta);
@magenta-red: average(@magenta, @red);

@accent-base: .set-lumafix(spin(@rep-color, 30), @yellow)[];
@accent: .set-color(accent, @accent-base, 1, 1)[];

@complement-base: .set-lumafix(spin(@rep-color, 180), average(@orange, @teal))[];
@complement: .set-color(complement, @complement-base, 1, 1)[];

@accent-complement-base: .set-lumafix(spin(@rep-color, 210), @yellow)[];
@accent-complement: .set-color(complaccent, @accent-complement-base, 1, 1)[];

.color-helpers(@color, @multiplier: 1) {

    // create the color and its twelve basic variants
    
    @brightened: saturate(lighten(@color, (@multiplier*@lighten-by*.2)), 25%);
    @very-brightened-guess: saturate(lighten(@brightened, 10%), 20%);
    @hella-brightened-guess: saturate(lighten(@brightened, 20%), 40%);
    
    @dimmed: desaturate(darken(@color, (@multiplier*@lighten-by*.15)), 33%);
    @very-dimmed-guess: desaturate(darken(@dimmed, 15%), 10%);
    @hella-dimmed-guess: desaturate(darken(@dimmed, 30%), 20%);
    
    @lightened: lighten(@color, @multiplier*@lighten-by);
    @very-lightened-guess: lighten(@lightened, 33%);
    @hella-lightened-guess: lighten(@lightened, 66%);

    @darkened: darken(@color, @multiplier*@lighten-by);
    @very-darkened-guess: darken(@darkened, 25%);
    @hella-darkened-guess: darken(@darkened, 50%);
    
    @base-contrast-ceiling: .set-contrast-ratio(@color, @white)[];
    @border-color: .set-lumafix(@color, @black, 75%)[];

    .text-color(@ceiling) when (@ceiling >= 3) {
        &:extend(.tint);
    }

    .text-color(@ceiling) when (@ceiling < 3) {
        &:extend(.shade);
    }

    .text-color(@ceiling, @local-ceiling) when (@ceiling < 3) and (@local-ceiling >= 3) {
        &:extend(.tint);
    }

    .text-color(@ceiling, @local-ceiling) when (@ceiling >= 3) and (@local-ceiling < 3) {
        &:extend(.shade);
    }

    .text-color(@base-contrast-ceiling);

    --h: round(hue(@color), 0);
    --s: round(saturation(@color), 0);
    --l: round(lightness(@color), 0);

    .light& { 
        --b: round(lightness(@lightened), 0);
        
        @light-ceiling: .set-contrast-ratio(@lightened, @white)[];
        .text-color(@base-contrast-ceiling, @light-ceiling);
    } 

    .very.light& {
        @light-ceiling: .set-contrast-ratio(@very-lightened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @light-ceiling);
    }

    .hella.light& {
        @light-ceiling: .set-contrast-ratio(@hella-lightened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @light-ceiling);
    }

    .dark& { 
        --b: round(lightness(@darkened), 0);

        @dark-ceiling: .set-contrast-ratio(@darkened, @white)[];
        .text-color(@base-contrast-ceiling, @dark-ceiling);
    }

    .very.dark& {
        @dark-ceiling: .set-contrast-ratio(@very-darkened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @dark-ceiling);
    }

    .hella.dark& {
        @dark-ceiling: .set-contrast-ratio(@hella-darkened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @dark-ceiling);
    }

    .bright& { 
        --b-s: round(saturation(@brightened), 0);
        --b-l: round(lightness(@brightened), 0);

        @bright-ceiling: .set-contrast-ratio(@brightened, @white)[];
        .text-color(@base-contrast-ceiling, @bright-ceiling);
    }

    .very.bright& {
        @bright-ceiling: .set-contrast-ratio(@very-brightened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @bright-ceiling);
    }

    .hella.bright& {
        @bright-ceiling: .set-contrast-ratio(@hella-brightened-guess, @white)[];
        .text-color(@base-contrast-ceiling, @bright-ceiling);
    }

    .dim& { 
        --b-s: round(saturation(@dimmed), 0);
        --b-l: round(lightness(@dimmed), 0);

        @dim-ceiling: .set-contrast-ratio(@dimmed, @white)[];
        .text-color(@base-contrast-ceiling, @dim-ceiling);
    }

    .very.dim& {
        @dim-ceiling: .set-contrast-ratio(@very-dimmed-guess, @white)[];
        .text-color(@base-contrast-ceiling, @dim-ceiling);
    }

    .hella.dim& {
        @dim-ceiling: .set-contrast-ratio(@hella-dimmed-guess, @white)[];
        .text-color(@base-contrast-ceiling, @dim-ceiling);
    }
}

.default {
    --v: 0;
}

.sorta > *, .very > *, .hella > * {
    --v: 0;
}

.sorta {
    --v: .5;
}

.very {
    --v: 1;
}

.hella {
    --v: 2;
}

.light {
    --l: ~"calc(var(--b) + ((100% - var(--b)) * var(--jump) * var(--v, 0)))" !important;
    --jump: .33;
}

.dark {
    --l: ~"calc(var(--b) - ((var(--b) - 20%) * var(--jump) * var(--v, 0)))" !important;
    --jump: .33;
}

.bright {
    --s: ~"calc(var(--b-s) + ((100% - var(--b-s)) * var(--jump) * 6 * var(--v, 0)))" !important;
    --l: ~"calc(var(--b-l) + ((100% - var(--b-l)) * var(--jump) * var(--v, 0)))" !important;
    --jump: .15;
}

.dim {
    --s: ~"calc(var(--b-s) - ((var(--b-s)) * var(--jump) * 2 * var(--v, 0)))" !important;
    --l: ~"calc(var(--b-l) - ((var(--b-l)) * var(--jump) * 1 * var(--v, 0)))" !important;
    --jump: .15;
}

.white { .color-helpers(@white, .1); --jump: .01;}
.white.gray { .color-helpers(@white-gray, .2); --jump: .03;}
.gray { .color-helpers(@gray, .3); --jump: .08;}
.gray.black { .color-helpers(@gray-black, .5); --jump: .1;}
.black { .color-helpers(@black, .75); --jump: .15;}

.brand-color { .color-helpers(@base-color, .4);}
.complement { .color-helpers(@complement, .4);}
.accent { .color-helpers(@accent, .5);}
.complement.accent { .color-helpers(@accent-complement, .5);}

.red { .color-helpers(@red, .6);}
.red.orange { .color-helpers(@red-orange, .25);}
.orange { .color-helpers(@orange, .05);}
.orange.yellow { .color-helpers(@orange-yellow, .05);}
.yellow { .color-helpers(@yellow, .05);}
.yellow.green { .color-helpers(@yellow-green, .15);}
.green { .color-helpers(@green, .6);}
.green.teal { .color-helpers(@green-teal, .5);}
.teal { .color-helpers(@teal, .6);}
.teal.cyan { .color-helpers(@teal-cyan, .5);}
.cyan { .color-helpers(@cyan, .85);}
.cyan.blue { .color-helpers(@cyan-blue);}
.blue { .color-helpers(@blue, .85);}
.blue.purple { .color-helpers(@blue-purple);}
.purple { .color-helpers(@purple, .75);}
.purple.magenta { .color-helpers(@purple-magenta);}
.magenta { .color-helpers(@magenta, .75);}
.magenta.red { .color-helpers(@magenta-red);}

.orangered { &:extend(.red.orange all);}
.gold { &:extend(.orange.yellow all);}
.lime { &:extend(.yellow.green all);}
.jade { &:extend(.green.teal all);}
.aqua { &:extend(.teal.cyan all);}
.skyblue { &:extend(.cyan.blue all);}
.indigo { &:extend(.blue.purple all);}
.fuchsia { &:extend(.purple.magenta all);}
.pink { &:extend(.magenta.red all);}

.desaturated, .desaturated * {
    --s: 0% !important;
}

.desaturated img, .desaturated svg {
    filter: grayscale(100%);
}

.matched {
    --l: lightness(@base-color) !important;
}

.bright.gray, .bright.black, .light.black {
    --s: 10% !important;
}

.white {
    color: var(--black) !important;
}

.black {
    color: var(--white) !important;
}